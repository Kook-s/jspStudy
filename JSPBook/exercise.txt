01장 JSP 개요 : 원리를 이해하고 개발 환경 구축하기

   01. 정적 웹 페이지와 동적 웹 페이지의 차이점을 설명하시오.
   
      정적 웹 페이지는 컴퓨터에 저장된 텍스트 파일을 그대로 보는 것이고, 동적 웹 페이지는 저장된 내용을 다른 변수로
      가공 처리하여 보는 것입니다. 정적 웹 페이지는HTML(HyperText, Markup Language)과 같은 웹 언어로 작성하고,
      동적 웹 페이지는PHP(Personal Home Page), ASP(Active Server Page), JSP와 같은 웹 언어로 작성합니다.
      정적 웹 페이지는 미리 만들어놓은 정보만 보여주기 때문에 고객의 취향이나 변화에 적응할 수 없고, 새로운 것을 추가, 수정
      , 삭제하는 작업을 모두 수동으로 처리해야 하므로 관리하기가 어렵습니다. 하지만, 동적인 요소가 없기 때문에 데이터베이스더
      필요 없고 구축하기 쉬우며, 단순 문서로만 이루어져 있어 서버 간 통신이 거의 없고 속도가 빠릅니다. 또한 정적 문서로만 
      이루어져 있기 때문에 모든 호스팅 서버에서도 동작할수 있다는 것이 장점입니다.
      그러나 기술이 발전함에 따라 사용자의 기호에 맞게 능동적으로 변화하는 웹 페이자가 필요해져서 이를 의해 동적 웹 페이지를
      제공하는 PHP, ASP, JSP와 같은 언어가 개발되었습니다. 현재 우리가 보는 대부분의 웹 페이지는 동적 웹 페이지라고
      할 수 있습니다. 동적 웹 페이지는 사용자가 웹 페이지에 글을 작성하거나 환경 설정 등을 바꾸면 그 내용이 서버에 있는 
      데이터베이스에 저장되고 결과가 웹 페이지에 반영되는 형태로 동작합니다.
      
   02. 웹 프로그래밍 언어 JSP 특징을 설명하시오.
   
   1) JSP는 서블릿 기술의 확장입니다.
   
      JSP에서는 서블릿의 모든 기능을 사용할 수 있습니다. 즉 서블릿과 마찬가지로 JDBC, JNDI, EJB
      하고 있는 강력한 엔터프라이즈 자바 API를 ㄱ사용할 수 있습니다. 또한 쉽게 개발ㅎ할 수 있도록 JSP 에서는 내장 객체,
      미리 정의된 태그, 표현식 언어와 사용자 정의 태그를 사용할 수 있습니다.
      
   2) JSP는 유지 관리가 용이합니다.
   
      서블릿 기술에는 프레젠테이션 로직과 비즈니스 로직이 섞여 있지만 JSP 기술의 경우 프레젠테이션 로직과
      비즈니스 로직을 분리할 수 있기 때문에 관리하기가 쉽습니다.
      
   3) JSP 빠른 개발이 가능합니다.
   
      코드를 수정했을 때 서블릿에서는 업데이트를 하고 다시 컴파일해야 합니다. 그러나 JSP의 경우 다시 컴파일하고
      프로젝트를 배포할 필요가 없습니다.
      
   4) JSP로 개발하묜 코드 길이를 줄일 수 있습니다.
   
      JSP에서는 액션태그, JSTL, 사용자 정의 태그 등의 다양한 태그와 표현 언어, 내장 객체 등을 사용함으로써
      서블릿 보다 코드를 줄일 수 있습니다.
      
   3. JSP페이지의 처리 과정을 설명하시오
   
      [PDF 24p 그림 참고] or [CH01 JSP 개요. PPT 9P 그림참고
      
   1) 웹 브라우저 웹 서버에 JSP를 요청합니다
      웹 서버는 요청된 hello.jsp에서 jsp 확장자를 발견하여 JSP 페이지임을 확인하고 웹 서버에 있는 JSP컨테이너에
      전달합니다.
      
   2) JSP 컨테이너는 JSP페이지를 서블릿 프로그램인hello_jsp.java로 변환합니다.
   3) JSP 컨테이너가 서블릿 프로그램을 컴파일하여 hello_jsp.class로 만들고 이를 웹 서버에 전달합니다.
   4) 웹 서버는 정적 웹 페이지처럼 *.class의 실행 결과룰 웹 브라우저에 응답으러 전달하므로 웹 브라으저는 새로 가곧된
   HTML페이지를 동적으로 처리한 결과를 보여줍니다.
   
02ㅏㅈ  스크립트 태그 : 시작페이지 만ㄷ글기

	01. 스크립트 태그의 세가지 종류에 대해 간단히 설명하시오
		1) 선언문 태그
			
			선언문 태그에 선언되 변수와 메소드는 JSP페이지 임의의 위체이서 선언할 수 있으며 , 스크립 틀릿 태그 보다 나중에 선언해도
			스크립틀릿 태그에서 사용할 수 있습니다. 선언문 태그로 선언되 변수는 전역 변수로 사용되고, 선언문 태그로 선언된 메소드는 전역 
			변수처럼 전역 메소드로 사용됩니다.

		2) 스크립틀릿 태그
		   
		   	스크립틀릿 태그는 out 객체를 사용하지 않고도 쉽게 HTML 응답을 만들어 낼 수 있습니다.
		   	가장 일반적으로 사용되며 변수 또는 메소드 선언, 유효식 등 다수를 포함할 수있습니다./
		   	모든 텍스트, html 태그 또는 JSP 요소는 스크립틀릿 태그 외부에 있어야 합니다.
		   	
		3) 표현문 태그
		표현문 태그를 이용하여 선언문 태그 또는 스크립틀릿 태그에서 선언된 변수나 ㅁ[소드의 반환 값을 외부로 출력할 수 있습니다.
		표현문 태그는 스크립틀릿 태그에서 사용할 수 없으므로 이 경우에는 out.println()메소드를 사용해야 합니다.
		표현문 태그에서 숫자 문자 불 등의 기본 데티어 타입과 자바 객체타입도 사용 가능합니다. 그리고 표현문 태그에서 작성된 모든 자바 코드의
		값은 문자열로 변환 되어 웹 브라우저에 출력됩니다.
		
	02.선언문 태그와 스크립틀릿 태그의 차이점 을 설명하시오
	
	선언문                                          스크립틀릿
	변수뿐만 아니라 메소드를 선언할 수 있다.        스크립틀릿 태그는 메소드 없이 변수만 선언할 수 있다.
	서블릿 프로그램으로 변환될때                    서블릿 프로그램으로 변환될때 
	_jspService()메소드 외부에 배치                  _jspService() 메소드 내부에 배치
	
	03. 애플리케이션 실행 결과에는 보이지않는 JSP 주석 표기번은 무엇인가요
	<%-- --%>
	


03자 디텍티브 태그 : 한글 출력 페에지 모듈화 하기
	01. 디렉티브 태그의 세가지 유형에 대해 간단히 설명하시오
	
	  디렉티브         형식                     설명
	  page             <%@page %>               JSP 페이지에 대한 정보를 설정합니다.
	  include          <%@include %>            JSP 페이지의 특정 영역에 다른 문서를 포함합니다.    		   	
	  taglib          <%@taglib %>            JSP 페이지에서 사용할 태그 라이브러리를 설정합니다.
	  
	  
	02 JSP 페이지가 사용할 자바 클래스를 설정하기 위한 page 디렉티브 태그이 속성은 무엇인가요
	
 -import
 
 	03  JSP 페이지의 특정 영역에 외부 파일의 내용을 포함하는 디렉티브 태그는 무엇인가요
 	-include
 	

04장 액션 태그

	01. 자바빈즈 클래스
	
		-vo 와 같은 데이터를 저장할 공간을 뜻한다.
		
	02 페이지 이동방식
	
		1)forward
		 
		 	-request, response가 1개 씩 존재한다.
		 	- 최초의 담겨져 넘어온 parameter는 최초의 생성된 request에 담겨져 있으므로 응답으로 내보내질때
		 	  해당 parameter를 담아 보낼때 request scope 영역에 담아 보낼 수 있고 값을 꺼낼 수 있다.
		 	-응답으로 나가는 리턴 페이지 값은 url이 아닌 페이지 경로가 된다.
		 	-주로 데이터를 가용하여 페이지를 요청하는 요청이 아닌 단순히 페이지만 을 요청하는 처리일때 페이지 이동방식 forward를 활용한다.
		 	
		2)redirect
			- request, response 가 2개 씩 존재한다. ( 꼭 2개라는 정형화는 아님, 새로운 request가 생성된다는 뜻)
			- 최초 요청 url에 담겨져 넘어온 parameter는 새롭게 만들어진 request에서 사용할 수 있다.
			- 최초 요청 url에 담겨 넘어온 parameter를 이용하여 새롭게 요청된 url에 request scope 영역에 담아 해당 페이지로 응갑할 때,
			  새롭게 만들어진 request scope 에서는 값을 꺼낸수 없으므로 ,ssesion scope를 활용하여 값을 꺼내야 한다.
			-응답으로 나가는 리턴 페이지 값은 펭지ㅣ 경로 가 아닌 url경로가 된다.
			-redirect 를 활용하는 경우는 다양한 로직 에 따라 부여되는 페이지 이동방식이 다르겠지만 , 주로 데이터를 가용하거나 변형한 후에 
			데이터를 가용하고 변형하는 기능이 재 요청되니 않도록 하기위해서 redirect 인 페이지 이동방식을 활용한다. 
			
05장 내장 객체 : 상품상제 정보 표시하기

	01. 폼 페이제에서 입력된 데이터를 전달하는 요청 파라미터 값을 JSP 페이지로 내장 객체는 무엇인지 그리고 관련된ㅁ ㅔ소드에ㅐ 대해 간단히 설명하시오
	
		request 내장 객체
		
		요청 파라미터 관련 메소드     |   반환 유형  |  설명
		---------------------------------------------------------------------------------------------------------
		getParameter(String name)     | String        | 요청 파라미터 이름이 name 인 값은 전달 받는다
		                              |               | 요청 파라미터 값이 없으면 null을 반환한다.
		---------------------------------------------------------------------------------------------------------
		getParameterValues(String name) | String[]    | 모든 요청 파라미터 이름이 name인 값을 배열 형태로 전달받는다.
		                                 |            | 요청 파라미엍 값이 없으면 null을 반환한다.
       ---------------------------------------------------------------------------------------------------------
       getParameterNames()            | Enumeration   | 모든 요청 파라미터의 이름과 값을 Enumeration객체 타입을 전달받는다.
       ---------------------------------------------------------------------------------------------------------
       getparameterMap()              |   Map         |  모든 요청 파라미터의 이름과 값을 Map객체 타입으로 전달받는다. 
                                      |               |	  Map 객체 타입은 요청 파라미터 이름 , 값 형식을 ㅗ구성

	02. 서버에서 웹브라우저에 다른 페이지로 강제 이동하도록 명령하는 내장 객체와 관련된 메소드는 무엇인가
	
		request 내장객체
		
		페이지 이동관련 메소드       | 반환유형  |   설명
		---------------------------------------------------------------------------------------------------------
		sendRedirect(String url)     |  void     | 설정한 URL 페이지로 강제 이동한다.
		---------------------------------------------------------------------------------------------------------
		
		
		
06장 폼 태그 상품 등록 페이지 만들기
	
	01. form 태그에 사용하는 속성에 대해 간단히 설명하시오
	
	속성            |      설명
	---------------------------------------------------------------------------------------------------------
	action          | 폼 데이터를 받아 처리하는 웹피잊의 URL 을 설정합니
	method	        | 폼 데이터가 전송되는 HTTP 방식을 설정합니다	
	name            | 폼을 식별하기 위한 이름을 설정한다.
	target          | 폼 처리 결과의 응답을 실행할 프레임을 설정합니다
	enctype         | 폼을 전송하느 ㄴ콘텐스 MIME 유형을 설정합니다
	accept-charset  | 폼 전송에 사용할 문자 인코딩을 설정합니다.
	---------------------------------------------------------------------------------------------------------
	
	02 form 태그 내에 중첩하여 사용하는 태그를 나열하고 설명하시오
	
	input 태그
	사용자가 텍스트 입력이나 선택 등을 다양하게 할 수 있도록 공간을 만드는 태그로 종료 태그 없이 단독으로 사용할 수 있다
	 
	select 태그
	여러개의 항목이나 나타나는 목록 상자에서 ㅅ항목을 선택하는 태그입니다.
	시작ㅌ내그와 종료 태그가 있으며 리트스 박스에 여러 항목을 추가 삽입하기 위해 반드시 option 태그를 포함해야 합니다
	
	textarea 태그
	여러줄의 텍스트를 입력할 수 있는 태그 . 가장 큰 특징은 입력 폼안에 사용된 태그와 뛰어쓰기가 그대로 출력 된다는 것입니다.
	
	03. 폼 페이지에서 전송된 데이터를 전달받는 내장 객체와 관련된 메소드는 무엇인가요
	   request 내장 객체
	   
	   요청 파라미터의 값 받기 : getParameter(요청 파라미터 이름: name)
	   
07장 파입 업로드  상품 이미지 등록하기

	 01 파일 업로드를 위한 form 태그 내에 반드시 설정해야 하는 기업은 무엇인가요
	 
	 1)form 태그의 method 속성은 받드시 post 방식으로 설
	 2) form 태그의 enctype 속성은 반드시 multipart/form-data로 설정해야한다.
     3) form 태그의 action 속성은 파일 업로드를 처리할 JSP파일로 설정해야 한다
     4) 파일 업로드를 위해 INPUT 태그 TYPE 속성을 FILE로 설정해야한다.
            
     02. 파일을 서버에 업로드하는 처리 기법에 대해 간단히 설명하시오,
         
      01) Commos- Fileipload 를 이용한 파일 업로드
            
      Commons- fileupload를 이용하여 파일을 업로드하려면 먼저 Commons- fileupload 패키지에 포함되어 있는 DiskFileupload 객체를 생성한다,
      생성된 객체를 통해 해당 클래스가 제공하는 메소드를 사용하여 웹 브라우저가 전송한 multipart/form-data 유형의 요청 파라미터를 가져온다.
      그리고 FileItem 클래스의 메소드를 사용하여 요청 파라미터가 일반 테이터인지 파일인지 분석 및 처리하여 파일을 업로드한다.

	 	   
		                             	                                                                
			
			
			 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 		  
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
					
      